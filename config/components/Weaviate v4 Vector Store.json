{"data":{"edges":[],"nodes":[{"data":{"node":{"template":{"_type":"Component","ingest_data":{"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"ingest_data","value":"","display_name":"Ingest Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"api_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"name":"api_key","value":"","display_name":"API Key (Cloud Only)","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import weaviate\nfrom loguru import logger\nfrom langflow.custom import Component\nfrom langflow.io import StrInput, IntInput, BoolInput, SecretStrInput, HandleInput, Output\nfrom langflow.schema import Data\n\n\nclass WeaviateVectorStoreComponent(Component):\n    display_name = \"Weaviate v4 Vector Store\"\n    description = \"Stores and retrieves documents from Weaviate using the v4 API.\"\n    icon = \"database\"\n    name = \"WeaviateVectorStore\"\n\n    inputs = [\n        StrInput(name=\"host\", display_name=\"Weaviate Host\", value=\"langflow-weaviate\", required=True),\n        IntInput(name=\"port\", display_name=\"HTTP Port\", value=8080, required=True),\n        IntInput(name=\"grpc_port\", display_name=\"gRPC Port\", value=50051, required=True),\n        BoolInput(name=\"is_cloud\", display_name=\"Cloud Connection\", value=False, required=True),\n        SecretStrInput(name=\"api_key\", display_name=\"API Key (Cloud Only)\", required=False),\n        StrInput(name=\"index_name\", display_name=\"Index Name\", required=True, info=\"Should be capitalized.\"),\n        HandleInput(name=\"ingest_data\", display_name=\"Ingest Data\", input_types=[\"Data\"]),\n        StrInput(name=\"query\", display_name=\"Search Query\", required=False, info=\"Text to search in Weaviate.\"),\n        IntInput(name=\"top_k\", display_name=\"Number of Results\", value=5, required=False),\n    ]\n\n    outputs = [\n        Output(display_name=\"Connection Status\", name=\"status\", method=\"test_connection\"),\n        Output(display_name=\"Stored Document\", name=\"stored_doc\", method=\"store_document\"),\n        Output(display_name=\"Search Results\", name=\"search_results\", method=\"search_documents\"),\n    ]\n\n    def connect_to_weaviate(self):\n        \"\"\"Handles connection to Weaviate v4.\"\"\"\n        try:\n            if self.is_cloud and self.api_key:\n                logger.info(\"Connecting to Weaviate Cloud instance...\")\n                auth_config = weaviate.auth.AuthApiKey(api_key=self.api_key)\n                client = weaviate.connect_to_weaviate_cloud(cluster_url=self.host, auth_credentials=auth_config)\n            else:\n                logger.info(\"Connecting to local Weaviate instance...\")\n                client = weaviate.connect_to_local(\n                    host=self.host,\n                    port=self.port,\n                    grpc_port=self.grpc_port,\n                    skip_init_checks=True\n                )\n            return client\n        except Exception as e:\n            logger.error(f\"‚ùå Connection error: {e}\")\n            return None\n\n    def test_connection(self) -> Data:\n        \"\"\"Tests if Weaviate is accessible.\"\"\"\n        client = self.connect_to_weaviate()\n        if client and client.is_ready():\n            message = f\"‚úÖ Connected to {'Weaviate Cloud' if self.is_cloud else 'Local Weaviate'} successfully.\"\n            logger.info(message)\n            return Data(data={\"status\": \"success\", \"message\": message})\n        return Data(data={\"status\": \"failed\", \"message\": \"‚ùå Failed to connect to Weaviate.\"})\n\n    def store_document(self) -> Data:\n        \"\"\"Stores a document in Weaviate v4 with correct field mapping.\"\"\"\n        client = self.connect_to_weaviate()\n        if not client:\n            return Data(data={\"error\": \"Failed to connect to Weaviate.\"})\n    \n        if not self.ingest_data or not isinstance(self.ingest_data, Data):\n            return Data(data={\"error\": \"No valid document data provided for ingestion.\"})\n    \n        try:\n            collection = client.collections.get(self.index_name)\n            if not collection:\n                logger.info(f\"Creating new collection: {self.index_name}\")\n                client.collections.create(self.index_name, vectorizer=\"text2vec-transformers\")\n    \n            document = self.ingest_data.data  # Extracts actual document from Langflow input\n    \n            # üîπ Ensure \"summary\" is stored as \"content\"\n            if \"summary\" in document:\n                document[\"content\"] = document.pop(\"summary\")  # Rename key\n    \n            response = collection.data.insert(document)\n            logger.info(f\"‚úÖ Document stored: {response}\")\n            return Data(data={\"status\": \"success\", \"document\": response})\n        except Exception as e:\n            logger.error(f\"‚ùå Error storing document: {e}\")\n            return Data(data={\"error\": str(e)})\n\n    def search_documents(self) -> Data:\n        \"\"\"Performs a similarity search in Weaviate v4.\"\"\"\n        client = self.connect_to_weaviate()\n        if not client:\n            return Data(data={\"error\": \"Failed to connect to Weaviate.\"})\n\n        if not self.query or not isinstance(self.query, str) or not self.query.strip():\n            return Data(data={\"error\": \"No valid search query provided.\"})\n\n        try:\n            collection = client.collections.get(self.index_name)\n            if not collection:\n                return Data(data={\"error\": f\"Collection '{self.index_name}' does not exist.\"})\n\n            results = collection.query.near_text(query=self.query, limit=self.top_k)\n            logger.info(f\"üîç Search results: {results}\")\n            return Data(data={\"results\": results})\n        except Exception as e:\n            logger.error(f\"‚ùå Error searching Weaviate: {e}\")\n            return Data(data={\"error\": str(e)})\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"grpc_port":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":true,"placeholder":"","show":true,"name":"grpc_port","value":50051,"display_name":"gRPC Port","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"host":{"tool_mode":false,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":true,"placeholder":"","show":true,"name":"host","value":"langflow-weaviate","display_name":"Weaviate Host","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"index_name":{"tool_mode":false,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":true,"placeholder":"","show":true,"name":"index_name","value":"Memory_v1","display_name":"Index Name","advanced":false,"dynamic":false,"info":"Should be capitalized.","title_case":false,"type":"str","_input_type":"StrInput"},"is_cloud":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":true,"placeholder":"","show":true,"name":"is_cloud","value":false,"display_name":"Cloud Connection","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"},"port":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":true,"placeholder":"","show":true,"name":"port","value":8080,"display_name":"HTTP Port","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"query":{"tool_mode":false,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"query","value":"","display_name":"Search Query","advanced":false,"dynamic":false,"info":"Text to search in Weaviate.","title_case":false,"type":"str","_input_type":"StrInput"},"top_k":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"top_k","value":5,"display_name":"Number of Results","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"}},"description":"Stores and retrieves documents from Weaviate using the v4 API.","icon":"database","base_classes":["Data"],"display_name":"Weaviate v4 Vector Store","documentation":"","minimized":false,"custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"status","hidden":null,"display_name":"Connection Status","method":"test_connection","value":"__UNDEFINED__","cache":true,"required_inputs":null,"allows_loop":false,"tool_mode":true},{"types":["Data"],"selected":"Data","name":"stored_doc","hidden":null,"display_name":"Stored Document","method":"store_document","value":"__UNDEFINED__","cache":true,"required_inputs":null,"allows_loop":false,"tool_mode":true},{"types":["Data"],"selected":"Data","name":"search_results","hidden":null,"display_name":"Search Results","method":"search_documents","value":"__UNDEFINED__","cache":true,"required_inputs":null,"allows_loop":false,"tool_mode":true}],"field_order":["host","port","grpc_port","is_cloud","api_key","index_name","ingest_data","query","top_k"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.1.4.post1","official":false},"showNode":true,"type":"WeaviateVectorStore","id":"Weaviate-J3UQC"},"id":"Weaviate-J3UQC","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Stores and retrieves documents from Weaviate using the v4 API.","name":"Weaviate v4 Vector Store","id":"Weaviate-J3UQC","is_component":true,"last_tested_version":"1.1.4.post1"}